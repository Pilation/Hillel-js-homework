let userData = {
    'USD': 1000,
    'EUR': 900,
    'UAH': 15000,
    'BIF': 20000,
    'AOA': 100
},
    bankData = {
        'USD': {
            max: 3000,
            min: 100,
            img: 'üíµ'
        },
        'EUR': {
            max: 1000,
            min: 50,
            img: 'üí∂'
        },
        'UAH': {
            max: 0,
            min: 0,
            img: 'üí¥'
        },
        'GBP': {
            max: 10000,
            min: 100,
            img: 'üí∑'
        }
    }

const GetMoney = (userInfo, bankInfo) => {
    let UserCurrenciesData = {};
    UserCurrenciesData.userData = JSON.parse(JSON.stringify(userInfo));
    UserCurrenciesData.bankData = JSON.parse(JSON.stringify(bankInfo));
    let CheckBalance = confirm(`–ñ–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–∞—Ä—Ç–µ?`);
    let BankOperationsPromise = new Promise(
        (resolve, reject) => {
            CheckBalance ? resolve(UserCurrenciesData) : reject(UserCurrenciesData)
        }
    )
    BankOperationsPromise
        .then(
            resolve = (UserCurrenciesData) => {
                let inputCurrency;
                do {
                    inputCurrency = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${Object.keys(UserCurrenciesData.userData).join(`, `)}`, `USD`);
                } while (!Object.keys(UserCurrenciesData.userData).includes(inputCurrency))
                alert(`–ë–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${UserCurrenciesData.userData[inputCurrency]} ${inputCurrency}`)
            },
            reject = (UserCurrenciesData) => {
                for (let key in UserCurrenciesData.bankData) {
                    if (UserCurrenciesData.bankData[key].max == 0) {
                        delete UserCurrenciesData.bankData[key];
                        delete UserCurrenciesData.userData[key];
                    }
                    if (!Object.keys(UserCurrenciesData.userData).includes(key)) {
                        delete UserCurrenciesData.bankData[key]
                    }
                }
                for (let key in UserCurrenciesData.userData) {
                    if (!Object.keys(UserCurrenciesData.bankData).includes(key)) {
                        delete UserCurrenciesData.userData[key]
                    }
                }
                alert(`–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —Å–Ω—è—Ç–∏—è: ${Object.keys(UserCurrenciesData.userData).join(`, `)}`)
                do {
                    inputCurrency = prompt(`–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${Object.keys(UserCurrenciesData.userData).join(`, `)}`, `USD`);
                } while (!Object.keys(UserCurrenciesData.userData).includes(inputCurrency));
                let inputSum = prompt(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è`, 500);

                let maxSum = UserCurrenciesData.bankData[inputCurrency].max;
                let maxBalance = UserCurrenciesData.userData[inputCurrency];
                let minSum = UserCurrenciesData.bankData[inputCurrency].min;

                if (inputSum <= minSum) {
                    alert(`–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–Ω—è—Ç–∏—è: ${minSum} ${inputCurrency}`);
                }
                if (inputSum >= maxSum || inputSum >= maxBalance) {
                    alert(`–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –±–æ–ª—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–Ω—è—Ç–∏—è: ${Math.min(maxSum, maxBalance)} ${inputCurrency}`);
                }
                if (inputSum <= maxSum && inputSum <= maxBalance && inputSum >= minSum) {
                    alert(`–í–æ—Ç –í–∞—à–∏ –¥–µ–Ω–µ–∂–∫–∏ ${inputSum} ${inputCurrency} ${UserCurrenciesData.bankData[inputCurrency].img}`)
                }
            }
        )
        .finally(
            () => alert(`–°–ø–∞—Å–∏–±–æ, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä`)
        )
}
GetMoney(userData, bankData);